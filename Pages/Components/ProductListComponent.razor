@inject AppDbContext _context
@inject NavigationManager NavigationManager

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Price</th>
            <th>Category</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in _products)
        {
            <tr>
                <td>@product.Id</td>
                <td>@product.Name</td>
                <td>@product.Price.ToString("C")</td>
                <td>@product.Category</td>
                <td>
                    <button class="btn btn-outline-info" @onclick="@(() => Edit(@product.Id))">
                        <i class="oi oi-pencil"></i>
                    </button>
                    <button class="btn btn-outline-danger" @onclick="@(() => Delete(@product.Id))">
                        <i class="oi oi-circle-x"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    private List<Models.Product> _products = new();

    override protected async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task GetProducts()
    {
        _products = await _context.Products.AsNoTracking().ToListAsync();
    }

    public void Edit(int id)
    {
        NavigationManager.NavigateTo($"/products/edit/{id}");
    }

    public async Task Delete(int id)
    {
        var prod = await _context.Products.FirstOrDefaultAsync(x => x.Id == id);
        if (prod is null)
            throw new Exception("Produto n√£o encontrado");

        _context.Products.Remove(prod);
        await _context.SaveChangesAsync();

        await GetProducts();
    }
}